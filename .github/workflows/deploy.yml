name: 🚀 Deploy Telegram MTProto to EC2

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  APP_DIR: /home/ubuntu/telegram-mtproto

jobs:
  validate:
    name: 🧪 Validate Environment
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🔍 Validate Required Secrets
      run: |
        echo "🔍 Validating deployment secrets..."
        [ -z "${{ secrets.TELEGRAM_API_ID }}" ] && echo "❌ TELEGRAM_API_ID missing" && exit 1
        [ -z "${{ secrets.TELEGRAM_API_HASH }}" ] && echo "❌ TELEGRAM_API_HASH missing" && exit 1
        [ -z "${{ secrets.DATABASE_URL }}" ] && echo "❌ DATABASE_URL missing" && exit 1
        [ -z "${{ secrets.S3_BUCKET_NAME }}" ] && echo "❌ S3_BUCKET_NAME missing" && exit 1
        [ -z "${{ secrets.EC2_HOST }}" ] && echo "❌ EC2_HOST missing" && exit 1
        [ -z "${{ secrets.EC2_PRIVATE_KEY }}" ] && echo "❌ EC2_PRIVATE_KEY missing" && exit 1
        echo "✅ All required secrets validated"

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup SSH Connection
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        echo "✅ SSH connection configured"
    
    - name: 🚀 Execute Deployment on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e
          
          echo "🎯 Starting deployment to ${{ env.APP_DIR }}"
          echo "📅 Deployment time: $(date)"
          echo "🔧 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"
          
          # Create application directory
          mkdir -p ${{ env.APP_DIR }}
          cd ${{ env.APP_DIR }}
          
          # Backup existing deployment
          if [ -d ".git" ] && [ -f "docker-compose.yml" ]; then
            echo "💾 Creating backup of current deployment..."
            BACKUP_DIR="../telegram-mtproto-backup-$(date +%Y%m%d-%H%M%S)"
            cp -r . "$BACKUP_DIR"
            echo "✅ Backup created: $BACKUP_DIR"
          fi
          
          # Stop existing containers gracefully
          echo "🛑 Stopping existing containers..."
          if [ -f "docker-compose.yml" ]; then
            docker-compose down --timeout 30 --remove-orphans || true
          fi
          
          # Clone or update repository
          if [ -d ".git" ]; then
            echo "📥 Updating existing repository..."
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}
            git clean -fd
            echo "✅ Repository updated to latest commit"
          else
            echo "📥 Cloning repository for first deployment..."
            git clone https://github.com/${{ github.repository }}.git .
            git checkout ${{ github.ref_name }}
            echo "✅ Repository cloned successfully"
          fi
          
          # Create production environment file
          echo "📝 Creating production environment configuration..."
          cat > .env << 'ENVEOF'
        # Telegram MTProto Configuration
        TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_PHONE=${{ secrets.TELEGRAM_PHONE }}
        
        # Database Configuration
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        
        # AWS Configuration
        AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        
        # Lambda Function Names
        VIDEO_PROCESSOR_FUNCTION_NAME=${{ secrets.VIDEO_PROCESSOR_FUNCTION_NAME }}
        RESPONSE_HANDLER_FUNCTION_NAME=${{ secrets.RESPONSE_HANDLER_FUNCTION_NAME }}
        
        # Optional: Bot Token for Notifications
        TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
        
        # Application Configuration
        ENVIRONMENT=production
        LOG_LEVEL=INFO
        
        # Deployment Metadata
        GITHUB_SHA=${{ github.sha }}
        GITHUB_REF=${{ github.ref_name }}
        DEPLOYED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        DEPLOYED_BY=github-actions
        ENVEOF
          
          echo "✅ Environment configuration created"
          
          # Clean up old Docker resources
          echo "🧹 Cleaning up old Docker resources..."
          docker system prune -f --volumes || true
          docker image prune -a -f || true
          
          # Build new Docker image
          echo "🏗️ Building new Docker image..."
          docker-compose build --no-cache --parallel
          
          # Start new containers
          echo "🚀 Starting new application containers..."
          docker-compose up -d
          
          # Wait for application startup
          echo "⏳ Waiting for application to initialize..."
          sleep 45
          
          # Comprehensive health check
          echo "🏥 Performing application health checks..."
          HEALTH_ATTEMPTS=0
          MAX_HEALTH_ATTEMPTS=12
          HEALTH_SUCCESS=false
          
          while [ $HEALTH_ATTEMPTS -lt $MAX_HEALTH_ATTEMPTS ] && [ "$HEALTH_SUCCESS" = false ]; do
            HEALTH_ATTEMPTS=$((HEALTH_ATTEMPTS + 1))
            
            if curl -f -s --max-time 10 http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ Health check passed on attempt $HEALTH_ATTEMPTS"
              HEALTH_SUCCESS=true
            else
              echo "⏳ Health check attempt $HEALTH_ATTEMPTS/$MAX_HEALTH_ATTEMPTS failed, retrying in 10s..."
              sleep 10
            fi
          done
          
          if [ "$HEALTH_SUCCESS" = false ]; then
            echo "❌ Health checks failed after $MAX_HEALTH_ATTEMPTS attempts"
            echo "📊 Container status:"
            docker-compose ps
            echo "📋 Recent container logs:"
            docker-compose logs --tail=100 telegram-mtproto
            exit 1
          fi
          
          # Final deployment verification
          echo "📊 Final deployment verification:"
          echo "🐳 Container Status:"
          docker-compose ps
          
          echo "📋 Application Logs (Last 20 lines):"
          docker-compose logs --tail=20 telegram-mtproto
          
          echo "🔗 Application Endpoints:"
          echo "   Main: http://localhost:8000"
          echo "   Health: http://localhost:8000/health"
          
          # Cleanup old backups (keep only 3 most recent)
          echo "🧹 Cleaning up old deployment backups..."
          ls -dt ../telegram-mtproto-backup-* 2>/dev/null | tail -n +4 | xargs -r rm -rf
          
          echo ""
          echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY! 🎉"
          echo "📅 Completed at: $(date)"
          echo "🚀 Application is now running in production"
          echo ""
        ENDSSH
    
    - name: 🧹 Cleanup SSH Keys
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa
        echo "✅ SSH cleanup completed"
    
    - name: 📊 Generate Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Environment** | Production |" >> $GITHUB_STEP_SUMMARY
        echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **EC2 Host** | \`${{ secrets.EC2_HOST }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Deployed At** | $(date -u) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Application URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Main Application:** http://${{ secrets.EC2_HOST }}:8000" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** http://${{ secrets.EC2_HOST }}:8000/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Post-Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: 📢 Notify Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ Deployment notification: SUCCESS"
        else
          echo "❌ Deployment notification: FAILED"
        fi
